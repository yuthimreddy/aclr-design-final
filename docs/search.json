[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ACLR Final Project",
    "section": "",
    "text": "Report\n\nAudience\n\nOur final report’s audience/stakeholders include physicians and other researchers evaluating the health of patients who have undergone ACL reconstruction surgery.\n\n\nProblem Statement\n\nAfter athletes tear their anterior cruciate ligament (ACL), many undergo ACL reconstruction (ACLR) surgery. However, physicians and other researchers are still evaluating the recovery and health of patients who have undergone ACLR. It is important to note that a majority of patients do not get reinjured - in this study, 83% had no reinjuries after ACLR surgery. There are many features that can affect reinjury rates after the surgery, such as the gender of the patient, the graft type used, and even their mental readiness. Specifically, our stakeholders are interested in all of these factors and what combination will lead to the lowest reinjury rates in patients after ACLR surgery is performed.\n\n\nAnalysis\n\n[insert graph analyses]\n\n\nConclusion\n\n[insert conclusion]",
    "crumbs": [
      "Report"
    ]
  },
  {
    "objectID": "cleaning.html",
    "href": "cleaning.html",
    "title": "1  Data Cleaning",
    "section": "",
    "text": "insert cleaning",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Cleaning</span>"
    ]
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "2  Exploratory Data Analysis",
    "section": "",
    "text": "# setting up environment\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# importing data as dataframe:\ndf = pd.read_csv('aclr data(in).csv')\n\n\n# Including relevant variables into our dataframe and dropping the others:\ndf = df[['sex_dashboard', 'graft_dashboard2', 'reinjury', 'age', 'height_m', 'mass_kg', 'bmi', 'ikdc', 'acl_rsi', 'tegner_pre', 'tegner_now', 'lsi_ext_isok_60', 'lsi_flex_isok_60']]\ndf.head()\n\n\n\n\n\n\n\n\nsex_dashboard\ngraft_dashboard2\nreinjury\nage\nheight_m\nmass_kg\nbmi\nikdc\nacl_rsi\ntegner_pre\ntegner_now\nlsi_ext_isok_60\nlsi_flex_isok_60\n\n\n\n\n0\nMale\nOther\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\nNaN\nNaN\nNo\n21.7\n1.9\n87.4\n24.210526\n95.4\n87.5\n9.0\n9.0\n87.86\n103.32\n\n\n2\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\nFemale\nHS autograft\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nNaN\nNaN\nNo\n14.5\n1.6\n72.2\n28.203125\n79.3\n8.3\n8.0\n5.0\n45.00\n72.98\n\n\n\n\n\n\n\n\n# Filtering for numeric columns:\nnumeric_columns = df.select_dtypes(include=['int', 'float']).columns\n# imputing missing values with the mean for each respective column\nmean_values = df[numeric_columns].mean()\nm_df = df.fillna(mean_values)\nprint(m_df.head(5))\n\n  sex_dashboard graft_dashboard2 reinjury        age  height_m    mass_kg  \\\n0          Male            Other      NaN  20.184761  1.725412  74.343033   \n1           NaN              NaN       No  21.700000  1.900000  87.400000   \n2           NaN              NaN      NaN  20.184761  1.725412  74.343033   \n3        Female     HS autograft      NaN  20.184761  1.725412  74.343033   \n4           NaN              NaN       No  14.500000  1.600000  72.200000   \n\n         bmi       ikdc    acl_rsi  tegner_pre  tegner_now  lsi_ext_isok_60  \\\n0  25.201579  78.457377  64.929381    8.363162    5.838621        73.194083   \n1  24.210526  95.400000  87.500000    9.000000    9.000000        87.860000   \n2  25.201579  78.457377  64.929381    8.363162    5.838621        73.194083   \n3  25.201579  78.457377  64.929381    8.363162    5.838621        73.194083   \n4  28.203125  79.300000   8.300000    8.000000    5.000000        45.000000   \n\n   lsi_flex_isok_60  \n0         89.728019  \n1        103.320000  \n2         89.728019  \n3         89.728019  \n4         72.980000  \n\n\n5. Descriptive Statistics & Distributions\nProvide summaries of important variables:\n\n# Summarizing categorical variables description stats:\nprint('\\nCategorical Variable Descriptions:')\nprint('\\n', df['sex_dashboard'].value_counts())\nprint('\\n', df['graft_dashboard2'].value_counts())\nprint('\\n', df['reinjury'].value_counts())\nprint('\\n', pd.crosstab(df['sex_dashboard'], df['graft_dashboard2']))\n\n\nCategorical Variable Descriptions:\n\n sex_dashboard\nFemale          2399\nMale            2323\nNot Reported      15\nName: count, dtype: int64\n\n graft_dashboard2\nBTB autograft    1593\nOther            1151\nHS autograft     1030\nQT autograft      805\nAllograft         158\nName: count, dtype: int64\n\n reinjury\nBLANK            4273\nNo                789\nContralateral      61\nIpsilateral        51\nBoth                1\nName: count, dtype: int64\n\n graft_dashboard2  Allograft  BTB autograft  HS autograft  Other  QT autograft\nsex_dashboard                                                                \nFemale                   75            834           516    565           409\nMale                     83            757           513    574           396\nNot Reported              0              2             1     12             0\n\n\n\n# Pairplot of filtered variables:\nsns.pairplot(df[['age', 'height_m', 'mass_kg', 'bmi', 'ikdc', 'acl_rsi', 'tegner_pre', 'tegner_now', 'lsi_ext_isok_60', 'lsi_flex_isok_60']], plot_kws={\"s\": 5})\nplt.title('Pairplot of Quantitative Variables')\nplt.show()\n\n\n\n\n\n\n\n\n\n# Creating visualizations to illustrate distributions:\n\n\n# SCATTERPLOT: Between height and mass_kg\nplt.figure(figsize=(10,6))\nsns.scatterplot(x='height_m', y='mass_kg', data=df)\n# == SCAFFOLDING == \nplt.suptitle('Scatterplot of Height and Mass', weight = 'bold', fontsize = 16, x = 0.29)\n# axis labels:\nplt.xlabel('Height', weight = 'bold')\nplt.ylabel('Mass (kg)', weight = 'bold')\n\n# removing spines\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\n\nplt.show()\n\n\n# Histogram for 'age':\nplt.figure(figsize=(10,6))\ndf['age'].plot(kind='hist')\n# == SCAFFOLDING == \nplt.suptitle('Histogram of Age', weight = 'bold', fontsize=16, x=0.20)\nplt.title('Distribution of age values', fontsize=10, x=0.075)\nplt.subplots_adjust(top = 0.91) \n\n# axis labels:\nplt.xlabel('Age', weight = 'bold')\nplt.ylabel('Count', weight = 'bold')\n# removing spines\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\n\nplt.show()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n6. Examine Correlations (if relevant)\nInterpret findings: What variables appear related?\n\n# setting filtered_df to be the relevant columns:\nfiltered_df = df[['sex_dashboard', 'graft_dashboard2', 'reinjury', 'age', 'height_m', 'mass_kg', 'bmi', 'ikdc', 'acl_rsi', 'tegner_pre', 'tegner_now', 'lsi_ext_isok_60', 'lsi_flex_isok_60']]\n# dropping categorical columns:\nnum_fil_df = filtered_df.drop(['sex_dashboard', 'graft_dashboard2', 'reinjury'], axis=1)\n# creating correlation matrix of our filtered numerical columns\ncorr_matrix = num_fil_df.corr()\n\n# plotting correlation heatmap:\nplt.figure(figsize=(10,6))\nsns.heatmap(corr_matrix, fmt=\".1f\", annot=True, cmap=\"coolwarm\", center=0)\nplt.title(\"Cleaned Dataframe: Correlation Heatmap\",weight = 'bold', fontsize = 18, x=0.21)\nplt.show()\n\n\n\n\n\n\n\n\nPositively correlated variables seem to include: - ikdc and acl_rsi - bmi and mass_kg - tegner_now and ikdc - tegner_now and acl_rsi\nNegatively correlated variables seem to include: - tegner_pre and age - tegner_now and age\n7. Explore Relationships (if relevant)\nDig into potential causal or descriptive relationships Use visualizations and statistical summaries.\n\n# Records were mismatched so we shifted row values by 1 \n# (for every graft_type recorded, reinjury was blank so shifted by 1 to match)\ndf['reinjury_shifted'] = df['reinjury'].shift(-1)\ndf_cleaned = df[df['graft_dashboard2'].notna()][['graft_dashboard2', 'reinjury_shifted']]\ndf_cleaned.columns = ['graft_dashboard2', 'reinjury']\nprint(df_cleaned.head()) # previewing cleaned dataset\n\ndf_cleaned = df_cleaned[\n    (df_cleaned['reinjury'].str.upper() != 'BLANK') &\n    (df_cleaned['graft_dashboard2'].str.upper() != 'BLANK')]\n\n\ngrouped_counts = (\n    df_cleaned.groupby(['graft_dashboard2', 'reinjury'])\n    .size()\n    .reset_index(name='count')\n)\n\n# #graft_order = ['HS allograft', 'BTB allograft', 'QT autograft', 'Allograft', 'Other']\n# # Convert 'graft_dashboard2' to a categorical type w order\n# #grouped_counts['graft_dashboard2'] = pd.Categorical(\n#     grouped_counts['graft_dashboard2'],\n#     categories=graft_order,\n#     ordered=True\n# )\n# sort the DataFrame by this order for plotting\n#grouped_counts = grouped_counts.sort_values('graft_dashboard2')\n\n\n# plotting stacked bar chart:\nplt.figure(figsize=(10, 6))\nsns.barplot(\n    data=grouped_counts,\n    x='graft_dashboard2',\n    y='count',\n    hue='reinjury',\n    palette='Set2'\n)\n# == SCAFFOLDING == \nplt.xlabel('Graft Type')\nplt.ylabel('Count', weight = 'bold')\nplt.title('Reinjury Types by Graft Type', weight = 'bold', fontsize = 16, x = 0.2)\nplt.legend(title='Reinjury Type')\n# removing spines\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\n\nplt.tight_layout()\nplt.show()\n\n   graft_dashboard2 reinjury\n0             Other       No\n3      HS autograft       No\n8      HS autograft    BLANK\n10     HS autograft       No\n15     HS autograft       No\n\n\n\n\n\n\n\n\n\nHS Autograft has the highest proportion of no reinjuries, while the BTB autograft seems to have the highest recorded count of Contralateral reinjuries.\n\n# Bar Chart: Focusing on Tegner as a metric since it assesses overall functionality\n\n# calculating mean and std for both Tegner values:\nmean_val = [filtered_df['tegner_pre'].mean(), filtered_df['tegner_now'].mean()]\nstd_val = [filtered_df['tegner_pre'].std(), filtered_df['tegner_now'].std()]\n\n# == PLOTTING ==\nplt.figure(figsize=(10,6))\nplt.bar(['Pre', 'Now'], mean_val, yerr=std_val, capsize=5, color=['#7aa095', '#bf8b85'], alpha=0.6)\n\n# SCAFFOLDING:\nplt.suptitle('Tegner Performance Decreases after ACL Reconstruction ', weight='bold', fontsize=16, x = 0.46)\nplt.title('Comparing Tegner scores before surgery to scores recorded post-surgery', fontsize=12, x = 0.36)\n\nplt.subplots_adjust(top = 0.90) # adjusting space between the super title and the title\nplt.ylabel('Tegner Score', weight='bold')\nplt.xlabel('Pre vs. Now', weight='bold')\n\n# removing spines\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.show()\n\n\n\n\n\n\n\n\n\n# Creating a violin plot to compare the tegner_pre and tegner_now by age:\n\n# PLOT\nplt.figure(figsize=(12, 6))\nsns.violinplot(data=filtered_df[['tegner_pre', 'tegner_now']], inner='quartile')\n\n# SCAFFOLDING:\nplt.suptitle('Tegner Scores are Lower After ACL Reconstruction', weight='bold', fontsize=16, x = 0.365)\nplt.title('Comparing values from the pre_tegner to the current tegner values', fontsize=12, x = 0.27)\n\nplt.subplots_adjust(top = 0.90) # adjusting space between the super title and the title\nplt.ylabel('Tegner Score', weight='bold')\nplt.xlabel('Pre vs. Now', weight='bold')\n\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "viz.html",
    "href": "viz.html",
    "title": "3  Data Visualization",
    "section": "",
    "text": "insert visualizations",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "dict.html",
    "href": "dict.html",
    "title": "4  Data Dictionary",
    "section": "",
    "text": "Here are the relevant variables we used to complete our analysis with their meanings.\n\n\n\n\n\n\n\nVariable\nDescription\n\n\n\n\nacl_rsi\nThe return-to-sport-after-injury score is self-reported by the patient.\n\n\nage\nThe age at which the patient received surgery.\n\n\nbmi\nBody mass index of the patient.\n\n\ngraft_dashboard2\nThe types of grafts used in surgery are allograft, QT autograft,\n\n\n\nHS autograft, BTB autograft, and others.\n\n\nheight_m\nThe height of the patient in meters.\n\n\nikdc\nA patient-reported outcome measure used to assess knee function and\n\n\n\nsymptoms.\n\n\nmass_kg\nThe weight of the patient in kilograms.\n\n\nreinjury\nThe different types of reinjuries: contralateral, ipsilateral, and both.\n\n\nsex_dashboard\nThe gender of the patient: male or female.\n\n\ntss_dashboard\nCategorizes the months post-surgery into subsets.\n\n\n————————\n————————————————————————-",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Dictionary</span>"
    ]
  }
]