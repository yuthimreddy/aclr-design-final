[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ACLR Final Project",
    "section": "",
    "text": "Report\n\nAudience\n\nOur final report’s audience/stakeholders include physicians and other researchers evaluating the health of patients who have undergone ACL reconstruction surgery.\n\n\nProblem Statement\n\nAfter athletes tear their anterior cruciate ligament (ACL), many undergo ACL reconstruction (ACLR) surgery. However, physicians and other researchers are still evaluating the recovery and health of patients who have undergone ACLR. It is important to note that a majority of patients do not get reinjured - in this study, 83% had no reinjuries after ACLR surgery. There are many features that can affect reinjury rates after the surgery, such as the gender of the patient, the graft type used, and even their mental readiness. Specifically, our stakeholders are interested in all of these factors and what combination will lead to the lowest reinjury rates in patients after ACLR surgery is performed.\n\n\nAnalysis\n\n[insert graph analyses]\n\n\nConclusion\n\n[insert conclusion]",
    "crumbs": [
      "Report"
    ]
  },
  {
    "objectID": "cleaning.html",
    "href": "cleaning.html",
<<<<<<< HEAD
    "title": "1  Data Cleaning",
    "section": "",
    "text": "1.0.0.1 Choosing our Variables:\nWith the given dataset, we decided to focus on the variables we deemed to be most relevant to our hypothesis regarding recovery trends. Categorical variables such as sex_dashboard, graft_dashboard2, reinjury, and tss_dashboard were inlcuded along with numerical values such as age, ikdc, acl_rsi, and bmi.\nOur categorical variables provide key insight into grouping individuals and focusing on patterns relevant to them, as well as stratifying their respective outcomes. For example, sex_dashboard allowed us to explore sex-based differences in recovery. Both graft_dashboard2 and reinjury helped us determine whether certain graft types experience reinjury more frequent with tss_dashboard establishing the time frame as to when individuals experienced their reinjury.\nThe numerical variables chosen are all continuous measures of both physical and psychological recovery factors that are key to affirming and establishing key numerical general descriptive statistics that provide a measure of evaluating outcome differences.\n\n\n1.0.0.2 Cleaning Approach:\nDuring our analysis, we took measures to address missing values, inconsistent data types, and outliers. For\nFor each variable, we assessed the proportion of missing values respective to the amount of osbservations. For our numerical columns, we decided to impute the missing values with the median, and for our categorical values decided to drop records entirely so that we could plot points accordingly when constructing our graphs and visualizations.\nAfter completing our intial cleaning process, we went ahead with our next step, Exploratory Data Analysis (EDA), to examine any relations and patterns within our dataset.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Cleaning</span>"
=======
    "title": "1  Data Cleaning Outline:",
    "section": "",
    "text": "Documentation for our data cleaning process, including decisions regarding how we handle missing values, outliers, and other data quality issues.\nFirst, we import the necessary libraries and set the dataset which is a .csv file provided by the UVA School of Data Science and the UVA Department of Kinesiology as a pandas dataframe.\n\n# Setting up our environment, importing all necessary libraries:\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Importing dataset as dataframe:\ndf = pd.read_csv('aclr data(in).csv')\n\n\n# Previewing the dataframe:\ndf.head()\n\n\n\n\n\n\n\n\nrecord_id\nredcap_event_name\nredcap_repeat_instrument\nsex_dashboard\ngraft_dashboard2\nmed_meniscus\nlat_meniscus\nlat_stab\nphysis\nvisit_sex\n...\nlsi_flex_mvic_60\nacl_ext_isok_60\ncon_ext_isok_60\nlsi_ext_isok_60\nacl_flex_isok_60\ncon_flex_isok_60\nlsi_flex_isok_60\nstrength_testing_complete\nrts\nrts_tss\n\n\n\n\n0\n1\nbaseline_arm_1\nNaN\nMale\nOther\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\n1\nvisit_1_arm_1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nMale\n...\nNaN\n2.57\n2.92\n87.86\n1.50\n1.45\n103.32\n2.0\nNaN\nNaN\n\n\n2\n1\nlong_term_outcomes_arm_1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n3.0\n70.0\n\n\n3\n2\nbaseline_arm_1\nNaN\nFemale\nHS autograft\n1.0\n3.0\n1.0\nNaN\nNaN\n...\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\n2\nvisit_1_arm_1\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nFemale\n...\nNaN\n0.97\n2.16\n45.00\n0.88\n1.20\n72.98\n2.0\nNaN\nNaN\n\n\n\n\n5 rows × 63 columns\n\n\n\n\n# Checking the dimensions of the dataframe:\nprint(df.shape)\n\n(11150, 63)\n\n\nThe original dataframe has 11150 observations and 63 columns. We will be focusing on the variables we feel are most relevant to our hypothesis. We will be using the columns: sex_dashboard, graft_dashboard2, reinjury, age, height_m, mass_kg, bmi, ikdc, acl_rsi and dropping the rest from the dataframe.\n\ndf = df[['sex_dashboard', 'graft_dashboard2', 'reinjury', 'age', 'height_m', 'mass_kg', 'bmi', 'ikdc', 'acl_rsi', 'tss_dashboard']]\ndf.head()\n\n\n\n\n\n\n\n\nsex_dashboard\ngraft_dashboard2\nreinjury\nage\nheight_m\nmass_kg\nbmi\nikdc\nacl_rsi\ntss_dashboard\n\n\n\n\n0\nMale\nOther\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\nNaN\nNaN\nNo\n21.7\n1.9\n87.4\n24.210526\n95.4\n87.5\n13 to 24 months\n\n\n2\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\nFemale\nHS autograft\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nNaN\nNaN\nNo\n14.5\n1.6\n72.2\n28.203125\n79.3\n8.3\n5 to 7 months\n\n\n\n\n\n\n\n\nNow that we have our columns of interest, we will first check for missing values across the dataset. We will use the isnull() method to check for missing values and the sum() method to get the total number of missing values in each column, as well as the percentage of missing values in each column.\n\n# Checking for missing values:\nmissing_values = df.isnull().sum()\n\n# Checking the percentage of missing values:\nmissing_percentage = (missing_values / len(df)) * 100\n# Displaying missing values and their percentage:\nmissing_values = pd.DataFrame({'Missing Values': missing_values, 'Percentage': missing_percentage})\n\n# Displaying the missing values:\nprint(missing_values)\n\n                  Missing Values  Percentage\nsex_dashboard               6413   57.515695\ngraft_dashboard2            6413   57.515695\nreinjury                    5975   53.587444\nage                         6024   54.026906\nheight_m                    8632   77.417040\nmass_kg                     7899   70.843049\nbmi                         8633   77.426009\nikdc                        8199   73.533632\nacl_rsi                     7750   69.506726\ntss_dashboard               5913   53.031390\n\n\n\nNow we will proceed by separating the variables into categorical and continuous variables. We will use the select_dtypes() method to select the categorical variables and the continuous variables. For our numerical variables, we will impute missing values with the respective mean for each column.\n\n# Filtering for numeric columns:\nnumeric_columns = df.select_dtypes(include=['int', 'float']).columns\n\n# Imputing missing values with the mean for each respective column/varibale:\nmean_values = df[numeric_columns].mean()\nm_df = df.fillna(mean_values)\n\n# Displaying the first 5 rows of the modified dataframe:\n(m_df.head(5))\n\n\n\n\n\n\n\n\nsex_dashboard\ngraft_dashboard2\nreinjury\nage\nheight_m\nmass_kg\nbmi\nikdc\nacl_rsi\ntss_dashboard\n\n\n\n\n0\nMale\nOther\nNaN\n20.184761\n1.725412\n74.343033\n25.201579\n78.457377\n64.929381\nNaN\n\n\n1\nNaN\nNaN\nNo\n21.700000\n1.900000\n87.400000\n24.210526\n95.400000\n87.500000\n13 to 24 months\n\n\n2\nNaN\nNaN\nNaN\n20.184761\n1.725412\n74.343033\n25.201579\n78.457377\n64.929381\nNaN\n\n\n3\nFemale\nHS autograft\nNaN\n20.184761\n1.725412\n74.343033\n25.201579\n78.457377\n64.929381\nNaN\n\n\n4\nNaN\nNaN\nNo\n14.500000\n1.600000\n72.200000\n28.203125\n79.300000\n8.300000\n5 to 7 months\n\n\n\n\n\n\n\n\nFor our categorical variables, we have decided to fill the missing values with just an Unknown category, since this allows us to keep the rows with missing values without losing too much information so that we can continue with plotting later on.\n\n# Filtering for Categorical columns:\ncategorical_columns = df.select_dtypes(include=['object']).columns\n# Imputing missing values with the value 'Unknown' for each respective column/variable:\nfor column in categorical_columns:\n    m_df[column] = m_df[column].fillna('Unknown')\n\n# Displaying the first 5 rows of the modified dataframe:\n(m_df.head(5))\n\n\n\n\n\n\n\n\nsex_dashboard\ngraft_dashboard2\nreinjury\nage\nheight_m\nmass_kg\nbmi\nikdc\nacl_rsi\ntss_dashboard\n\n\n\n\n0\nMale\nOther\nUnknown\n20.184761\n1.725412\n74.343033\n25.201579\n78.457377\n64.929381\nUnknown\n\n\n1\nUnknown\nUnknown\nNo\n21.700000\n1.900000\n87.400000\n24.210526\n95.400000\n87.500000\n13 to 24 months\n\n\n2\nUnknown\nUnknown\nUnknown\n20.184761\n1.725412\n74.343033\n25.201579\n78.457377\n64.929381\nUnknown\n\n\n3\nFemale\nHS autograft\nUnknown\n20.184761\n1.725412\n74.343033\n25.201579\n78.457377\n64.929381\nUnknown\n\n\n4\nUnknown\nUnknown\nNo\n14.500000\n1.600000\n72.200000\n28.203125\n79.300000\n8.300000\n5 to 7 months\n\n\n\n\n\n\n\n\nNow we have finished our early data cleaning process and are ready to explore relations in our EDA process.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Cleaning Outline:</span>"
>>>>>>> 4f66144f6d344353bbf188acbb4f487803d24698
    ]
  },
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "2  Exploratory Data Analysis",
    "section": "",
    "text": "Preview of the cleaned dataset (first five rows)\n\n# setting up environment\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n# importing data as dataframe:\ndf = pd.read_csv('aclr data(in).csv')\n# Including relevant variables into our dataframe and dropping the others:\ndf = df[['sex_dashboard', 'graft_dashboard2', 'reinjury', 'age', 'height_m', 'mass_kg', 'bmi', 'ikdc', 'acl_rsi', 'tegner_pre', 'tegner_now', 'lsi_ext_isok_60', 'lsi_flex_isok_60']]\ndf.head()\n\n\n\n\n\n\n\n\nsex_dashboard\ngraft_dashboard2\nreinjury\nage\nheight_m\nmass_kg\nbmi\nikdc\nacl_rsi\ntegner_pre\ntegner_now\nlsi_ext_isok_60\nlsi_flex_isok_60\n\n\n\n\n0\nMale\nOther\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\nNaN\nNaN\nNo\n21.7\n1.9\n87.4\n24.210526\n95.4\n87.5\n9.0\n9.0\n87.86\n103.32\n\n\n2\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\nFemale\nHS autograft\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nNaN\nNaN\nNo\n14.5\n1.6\n72.2\n28.203125\n79.3\n8.3\n8.0\n5.0\n45.00\n72.98\n\n\n\n\n\n\n\n\n# Filtering for numeric columns:\nnumeric_columns = df.select_dtypes(include=['int', 'float']).columns\n# imputing missing values with the mean for each respective column\nmean_values = df[numeric_columns].mean()\nm_df = df.fillna(mean_values)\n\n\n2.0.1 Pairplot of our chosen variables\n\n# Pairplot of filtered variables:\nsns.pairplot(df[['age', 'height_m', 'mass_kg', 'bmi', 'ikdc', 'acl_rsi']], plot_kws={\"s\": 5})\nplt.title('Pairplot of Quantitative Variables')\nplt.show()\n\n\n\n\n\n\n\n\nThis pairplot illustrates the relationship between each pair of variables in our dataset. This is a quick and straightforward tool to see if there are any obvious correlations/clusters between different elements. We can see that BMI and mass have the most postively correlated relationship, which is to be expected (since mass is used to calculate BMI). Other than that, there are no glaringly obvious trends between variables.\nLooking at Specific Distributions\n\n# Creating visualizations to illustrate distributions:\n# SCATTERPLOT: Between height and mass_kg\nplt.figure(figsize=(10,6))\nsns.scatterplot(x='height_m', y='mass_kg', data=df)\n# == SCAFFOLDING == \nplt.suptitle('Scatterplot of Height and Mass', weight = 'bold', fontsize = 16, x = 0.29)\n# axis labels:\nplt.xlabel('Height (m)', weight = 'bold')\nplt.ylabel('Mass (kg)', weight = 'bold')\n# removing spines\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.show()\n\n\n\n\n\n\n\n\nThis is a scatterplot that plots the distribution of height v mass between all the patients. There is a pretty positive correlation between the two variables, since as height increases, mass also tends to increase. There is one outlier where height is around 3.25 meters, or around 10 feet. This is most likely a typo and they intended to mark it as 1.25.\n\n# Histogram for 'age':\nplt.figure(figsize=(10,6))\ndf['age'].plot(kind='hist')\n# == SCAFFOLDING == \nplt.suptitle('Histogram of Age', weight = 'bold', fontsize=16, x=0.20)\nplt.title('Distribution of age values', fontsize=10, x=0.075)\nplt.subplots_adjust(top = 0.91) \n# axis labels:\nplt.xlabel('Age', weight = 'bold')\nplt.ylabel('Count', weight = 'bold')\n# removing spines\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.show()\n\n\n\n\n\n\n\n\n6. Examine Correlations (if relevant)\nInterpret findings: What variables appear related?\n\n# setting filtered_df to be the relevant columns:\nfiltered_df = df[['sex_dashboard', 'graft_dashboard2', 'reinjury', 'age', 'height_m', 'mass_kg', 'bmi', 'ikdc', 'acl_rsi', 'tegner_pre', 'tegner_now', 'lsi_ext_isok_60', 'lsi_flex_isok_60']]\n# dropping categorical columns:\nnum_fil_df = filtered_df.drop(['sex_dashboard', 'graft_dashboard2', 'reinjury'], axis=1)\n# creating correlation matrix of our filtered numerical columns\ncorr_matrix = num_fil_df.corr()\n\n# plotting correlation heatmap:\nplt.figure(figsize=(10,6))\nsns.heatmap(corr_matrix, fmt=\".1f\", annot=True, cmap=\"coolwarm\", center=0)\nplt.title(\"Cleaned Dataframe: Correlation Heatmap\",weight = 'bold', fontsize = 18, x=0.21)\nplt.show()\n\n\n\n\n\n\n\n\nPositively correlated variables seem to include: - ikdc and acl_rsi - bmi and mass_kg - tegner_now and ikdc - tegner_now and acl_rsi\nNegatively correlated variables seem to include: - tegner_pre and age - tegner_now and age\n7. Explore Relationships (if relevant)\nDig into potential causal or descriptive relationships Use visualizations and statistical summaries.\n\n# Records were mismatched so we shifted row values by 1 \n# (for every graft_type recorded, reinjury was blank so shifted by 1 to match)\ndf['reinjury_shifted'] = df['reinjury'].shift(-1)\ndf_cleaned = df[df['graft_dashboard2'].notna()][['graft_dashboard2', 'reinjury_shifted']]\ndf_cleaned.columns = ['graft_dashboard2', 'reinjury']\nprint(df_cleaned.head()) # previewing cleaned dataset\n\ndf_cleaned = df_cleaned[\n    (df_cleaned['reinjury'].str.upper() != 'BLANK') &\n    (df_cleaned['graft_dashboard2'].str.upper() != 'BLANK')]\n\n\ngrouped_counts = (\n    df_cleaned.groupby(['graft_dashboard2', 'reinjury'])\n    .size()\n    .reset_index(name='count')\n)\n\n# #graft_order = ['HS allograft', 'BTB allograft', 'QT autograft', 'Allograft', 'Other']\n# # Convert 'graft_dashboard2' to a categorical type w order\n# #grouped_counts['graft_dashboard2'] = pd.Categorical(\n#     grouped_counts['graft_dashboard2'],\n#     categories=graft_order,\n#     ordered=True\n# )\n# sort the DataFrame by this order for plotting\n#grouped_counts = grouped_counts.sort_values('graft_dashboard2')\n\n\n# plotting stacked bar chart:\nplt.figure(figsize=(10, 6))\nsns.barplot(\n    data=grouped_counts,\n    x='graft_dashboard2',\n    y='count',\n    hue='reinjury',\n    palette='Set2'\n)\n# == SCAFFOLDING == \nplt.xlabel('Graft Type')\nplt.ylabel('Count', weight = 'bold')\nplt.title('Reinjury Types by Graft Type', weight = 'bold', fontsize = 16, x = 0.2)\nplt.legend(title='Reinjury Type')\n# removing spines\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\n\nplt.tight_layout()\nplt.show()\n\n   graft_dashboard2 reinjury\n0             Other       No\n3      HS autograft       No\n8      HS autograft    BLANK\n10     HS autograft       No\n15     HS autograft       No\n\n\n\n\n\n\n\n\n\nHS Autograft has the highest proportion of no reinjuries, while the BTB autograft seems to have the highest recorded count of Contralateral reinjuries.\n\n# Bar Chart: Focusing on Tegner as a metric since it assesses overall functionality\n\n# calculating mean and std for both Tegner values:\nmean_val = [filtered_df['tegner_pre'].mean(), filtered_df['tegner_now'].mean()]\nstd_val = [filtered_df['tegner_pre'].std(), filtered_df['tegner_now'].std()]\n\n# == PLOTTING ==\nplt.figure(figsize=(10,6))\nplt.bar(['Pre', 'Now'], mean_val, yerr=std_val, capsize=5, color=['#7aa095', '#bf8b85'], alpha=0.6)\n\n# SCAFFOLDING:\nplt.suptitle('Tegner Performance Decreases after ACL Reconstruction ', weight='bold', fontsize=16, x = 0.46)\nplt.title('Comparing Tegner scores before surgery to scores recorded post-surgery', fontsize=12, x = 0.36)\n\nplt.subplots_adjust(top = 0.90) # adjusting space between the super title and the title\nplt.ylabel('Tegner Score', weight='bold')\nplt.xlabel('Pre vs. Now', weight='bold')\n\n# removing spines\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.show()\n\n\n\n\n\n\n\n\n\n# Creating a violin plot to compare the tegner_pre and tegner_now by age:\n\n# PLOT\nplt.figure(figsize=(12, 6))\nsns.violinplot(data=filtered_df[['tegner_pre', 'tegner_now']], inner='quartile')\n\n# SCAFFOLDING:\nplt.suptitle('Tegner Scores are Lower After ACL Reconstruction', weight='bold', fontsize=16, x = 0.365)\nplt.title('Comparing values from the pre_tegner to the current tegner values', fontsize=12, x = 0.27)\n\nplt.subplots_adjust(top = 0.90) # adjusting space between the super title and the title\nplt.ylabel('Tegner Score', weight='bold')\nplt.xlabel('Pre vs. Now', weight='bold')\n\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\nplt.show()",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Exploratory Data Analysis</span>"
    ]
  },
  {
    "objectID": "viz.html",
    "href": "viz.html",
    "title": "3  Data Visualization",
    "section": "",
<<<<<<< HEAD
<<<<<<< HEAD
    "text": "# Environment Setup:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib \nimport seaborn as sns\nfrom matplotlib import font_manager\n\n\n# importing data as dataframe:\ndf = pd.read_csv('aclr data(in).csv')\n\n# filtering df to be consistent with relevant variables of interest:\ndf = df[['sex_dashboard', 'graft_dashboard2', 'reinjury', 'age', 'height_m', 'mass_kg', 'bmi', 'ikdc', 'acl_rsi', 'tegner_pre', 'tegner_now', 'lsi_ext_isok_60', 'lsi_flex_isok_60', 'tss_dashboard']]\n# previewing df with relevant columns:\n#df.head()\n# Filtering for numeric columns:\nnumeric_columns = df.select_dtypes(include=['int', 'float']).columns\n# imputing missing values with the mean for each respective column\nmean_values = df[numeric_columns].mean()\nm_df = df.fillna(mean_values)\n# previewing the imputed dataframe:\n#print(m_df.head(5))\ndf['sex_dashboard'] = df['sex_dashboard'].shift(-1)\n\n\n# == PLOT PREPARATION ==\n\n# data for graphing (getting rid of NaN values):\ndf_clean = df[['ikdc', 'acl_rsi', 'sex_dashboard', 'tss_dashboard']].dropna()\n\n# Filter by sex\ndf_male = df_clean[df_clean['sex_dashboard'] == 'Male']\ndf_female = df_clean[df_clean['sex_dashboard'] == 'Female']\n\n\n# setting plot size:\nplt.figure(figsize=(10, 6))\n# male graph:\nplt.scatter(df_male['ikdc'], df_male['acl_rsi'], \n            marker='x', label='Male', color='#0070BB', alpha=0.7, s=40)\n# Plot females with square markers\nplt.scatter(df_female['ikdc'], df_female['acl_rsi'], \n            marker='o', label='Female', color='#F653A6', alpha=0.5, s=40)\n\n# == SCAFFOLDING == \n\n# setting titles:\nplt.suptitle('Physical and Mental Recovery Go Hand in Hand', weight = 'bold', fontsize = 16, x = 0.39)\nplt.title('Physical gains mirror mental gains in ACL Recovery Journey', color='#585757', fontsize = 12, x = 0.28)\nplt.subplots_adjust(top = 0.905) # adjusting spacing between sub and main title\n\n\n# setting x-axis and y-axis labels:\nplt.xlabel('IKDC (Knee Function)', weight = 'bold', fontsize = 12)\nplt.ylabel('ACL_RSI (Mental Readiness)', weight = 'bold', fontsize = 12)\n\n# reducing clutter on the end of the x-axis:\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\nplt.locator_params(axis='x', nbins=8)  # reduces x-axis ticks\n\n# extra formatting (removing spines for cleaner look):\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\n# adding source as annotation:\nplt.figtext(0.1, -0.05, 'Source: UVA Department of Kinesiology and School of Data Science', ha='left', fontsize=10)\nplt.show()\n\n\n\n\n\n\n\n\nGraph 2:\nPlanning on creating a scatterplot showing how both physical and mental readiness affect each other and the individual’s overall confidence in returning to play.\n\n# setting font\ngeorgia_font = font_manager.FontProperties(family='Georgia')\nplt.rcParams['font.family'] = georgia_font.get_name()\n\ndf = df[['sex_dashboard', 'graft_dashboard2', 'reinjury', 'age', 'height_m', 'mass_kg', 'bmi', 'ikdc', 'acl_rsi']]\ndf = df[df['reinjury'].str.upper() != 'BLANK'] #get rid of all blank in reinjury\n\nprop_noreinjury = df['reinjury'].value_counts(normalize=True).get('No', 0) #get proportion of no reinjury\nprint(f\"Proportion of patients with no reinjury: {prop_noreinjury:.2%}\") #print proportion\n\ndf['reinjury_shifted'] = df['reinjury'].shift(-1) #align reinjury with other values\ndf_cleaned = df[df['graft_dashboard2'].notna()][['graft_dashboard2', 'reinjury_shifted']] #get rid of na\ndf_cleaned.columns = ['graft_dashboard2', 'reinjury'] #rename\n\ncounts = ( #get counts of graft and reinjury\n    df_cleaned.groupby(['graft_dashboard2', 'reinjury'])\n    .size()\n    .reset_index(name='count')\n)\n\ngraft_order = ['Allograft', 'QT autograft', 'HS autograft', 'BTB autograft', 'Other'] #order\ncounts['graft_dashboard2'] = pd.Categorical( #set order in counts\n    counts['graft_dashboard2'],\n    categories=graft_order,\n    ordered=True\n)\ntotal_per_graft = counts.groupby('graft_dashboard2')['count'].transform('sum') #get sums\ncounts['proportion'] = counts['count'] / total_per_graft #calculate proportions\n#show proportions\nprint(counts)\nprint('No reinjury proportions by Graft type:\\n' +\n'Allograft: 0.83\\n' +\n'BTB autograft: 0.89\\n' +\n'HS autograft: 0.92\\n' +\n'QT autograft: 0.87\\n' +   \n'Other: 0.84\\n')\n\ncounts_noreinjury = counts[counts['reinjury'] != 'No'] #get rid of no reinjury bar\nplt.figure(figsize=(10, 6))\nsns.barplot( #make grouped barplot\n    data=counts_noreinjury,\n    x='graft_dashboard2',\n    y='proportion',\n    hue='reinjury',\n    palette='mako'\n)\nplt.xlabel('Graft Type')\nplt.ylabel('Proportion of Reinjury Type')\nplt.title('Undergoing ACLR Surgery? Consider a Hamstring (HS) Tendon Autograft', fontsize=14, weight='bold', loc='left')  # Main title\nplt.text(0.01, 0.98, 'Comparing Proportions of Reinjury Types Across Different Graft Types', \n         ha='left', va='center', transform=plt.gca().transAxes, fontsize=10, color='gray')  # Subtitle\nplt.legend(title='Reinjury Type', loc='upper left', bbox_to_anchor=(0.775, 1.0))\nplt.text(-0.8, -0.02, 'Source: UVA Department of Kinesiology and School of Data Science', ha='left', fontsize=10)\n\nsns.despine(top=True, right=True, left=True) #get rid of axes\nplt.show()\n\nProportion of patients with no reinjury: 87.47%\n   graft_dashboard2       reinjury  count  proportion\n0         Allograft           Both      1    0.009174\n1         Allograft  Contralateral      3    0.027523\n2         Allograft    Ipsilateral     15    0.137615\n3         Allograft             No     90    0.825688\n4     BTB autograft  Contralateral     14    0.071066\n5     BTB autograft    Ipsilateral      7    0.035533\n6     BTB autograft             No    176    0.893401\n7      HS autograft  Contralateral     10    0.048544\n8      HS autograft    Ipsilateral      7    0.033981\n9      HS autograft             No    189    0.917476\n10            Other  Contralateral     12    0.100840\n11            Other    Ipsilateral      7    0.058824\n12            Other             No    100    0.840336\n13     QT autograft  Contralateral      8    0.067797\n14     QT autograft    Ipsilateral      7    0.059322\n15     QT autograft             No    103    0.872881\nNo reinjury proportions by Graft type:\nAllograft: 0.83\nBTB autograft: 0.89\nHS autograft: 0.92\nQT autograft: 0.87\nOther: 0.84\n\n\n\n/var/folders/4c/yrvzpq_57zv34g485zg023780000gn/T/ipykernel_66491/934650589.py:27: FutureWarning:\n\nThe default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n\n\n\n\n\n\n\n\n\n\nGraph 3: Looking at the relationship between different reinjuries between the sexes.\n\n# small multiples bar chart\n\n# Set font family to Georgia\ngeorgia_font = font_manager.FontProperties(family='Georgia')\nplt.rcParams['font.family'] = georgia_font.get_name()\n\n# Records were mismatched so we shifted row values by 1 \n# (for every graft_type recorded, reinjury was blank so shifted by 1 to match)\nm_df['reinjury_shifted'] = m_df['reinjury'].shift(-1)\ndf2 = m_df[m_df['sex_dashboard'].notna()][['sex_dashboard', 'reinjury_shifted']]\ndf2.columns = ['sex_dashboard', 'reinjury']\n# print(df2.head()) # previewing cleaned dataset\n\ndf2 = df2[\n    (df2['reinjury'].str.upper() != 'BLANK') &\n    (df2['sex_dashboard'].str.upper() != 'BLANK')]\n\ndf2 = df2[df2['reinjury'].str.upper() != 'NO'] # dropping 'no' reinjury records\ndf2= df2[df2['reinjury'].str.upper() != 'BOTH'] # dropping 'both' reinjury records\n\n\ngrouped_counts2 = (\n    df2.groupby(['sex_dashboard', 'reinjury'])\n    .size()\n    .reset_index(name='count')\n)\n\n\n# Create sub-dataframes for Contralateral and Ipsilateral\ndf_contra = grouped_counts2[grouped_counts2['reinjury'] == 'Contralateral']\ndf_ipsi = grouped_counts2[grouped_counts2['reinjury'] == 'Ipsilateral']\n\n# Set up 1x2 subplot grid\nfig, axs = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\n\n# Title\nfig.suptitle('Males Reinjure Their ACLs More Than Females Overall', fontsize=14, weight='bold', x=0.1, ha='left', y=1.02)\n\n# Contralateral subplot\ncolors_contra = df_contra['sex_dashboard'].map({'Male': '#C8E7F5', 'Female': '#F6D2E0'})  # blue and pink\nbars_contra = axs[0].barh(df_contra['sex_dashboard'], df_contra['count'], color=colors_contra)\naxs[0].set_title('Contralateral', loc='left', weight='bold', color='black')\naxs[0].grid(axis='x', linestyle=':', color='gray')\naxs[0].spines['top'].set_visible(False)\naxs[0].spines['right'].set_visible(False)\naxs[0].spines['bottom'].set_visible(False)\naxs[0].tick_params(axis='x', length=0)\naxs[0].tick_params(axis='y', length=0)\n\nfor bar in bars_contra:\n    xval = bar.get_width()\n    axs[0].text(xval + 0.5, bar.get_y() + bar.get_height()/2,\n                round(xval), va='center', ha='left', fontsize=10)\n\n# Ipsilateral subplot\ncolors_ipsi = df_ipsi['sex_dashboard'].map({'Male': '#C8E7F5', 'Female': '#F6D2E0'})\nbars_ipsi = axs[1].barh(df_ipsi['sex_dashboard'], df_ipsi['count'], color=colors_ipsi)\naxs[1].set_title('Ipsilateral', loc='left', weight='bold', color='black')\naxs[1].grid(axis='x', linestyle=':', color='gray')\naxs[1].spines['top'].set_visible(False)\naxs[1].spines['right'].set_visible(False)\naxs[1].spines['bottom'].set_visible(False)\naxs[1].tick_params(axis='x', length=0)\naxs[1].tick_params(axis='y', length=0)\n\nfor bar in bars_ipsi:\n    xval = bar.get_width()\n    axs[1].text(xval + 0.5, bar.get_y() + bar.get_height()/2,\n                round(xval), va='center', ha='left', fontsize=10)\n\n# Final layout\nplt.text(-42, -0.8, 'Source: UVA Department of Kinesiology and School of Data Science', ha='left', fontsize=10)\n# plt.tight_layout()\nplt.show()",
=======
    "text": "# Environment Setup:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib \nimport seaborn as sns\nfrom matplotlib import font_manager\n\n\n# importing data as dataframe:\ndf = pd.read_csv('aclr data(in).csv')\n\n# filtering df to be consistent with relevant variables of interest:\ndf = df[['sex_dashboard', 'graft_dashboard2', 'reinjury', 'age', 'height_m', 'mass_kg', 'bmi', 'ikdc', 'acl_rsi', 'tegner_pre', 'tegner_now', 'lsi_ext_isok_60', 'lsi_flex_isok_60', 'tss_dashboard']]\n# previewing df with relevant columns:\n#df.head()\n# Filtering for numeric columns:\nnumeric_columns = df.select_dtypes(include=['int', 'float']).columns\n# imputing missing values with the mean for each respective column\nmean_values = df[numeric_columns].mean()\nm_df = df.fillna(mean_values)\n# previewing the imputed dataframe:\n#print(m_df.head(5))\ndf['sex_dashboard'] = df['sex_dashboard'].shift(-1)\n\n\n# == PLOT PREPARATION ==\n\n# data for graphing (getting rid of NaN values):\ndf_clean = df[['ikdc', 'acl_rsi', 'sex_dashboard', 'tss_dashboard']].dropna()\n\n\n# Filter by sex\ndf_male = df_clean[df_clean['sex_dashboard'] == 'Male']\ndf_female = df_clean[df_clean['sex_dashboard'] == 'Female']\n# setting plot size:\nplt.figure(figsize=(10, 6))\n# male graph:\nplt.scatter(df_male['ikdc'], df_male['acl_rsi'], \n            marker='x', label='Male', color='#0070BB', alpha=0.7, s=40)\n# Plot females with square markers\nplt.scatter(df_female['ikdc'], df_female['acl_rsi'], \n            marker='o', label='Female', color='#F653A6', alpha=0.5, s=40)\n\n# == SCAFFOLDING == \n\n# setting titles:\nplt.suptitle('Physical and Mental Recovery Go Hand in Hand', weight = 'bold', fontsize = 16, x = 0.39)\nplt.title('Physical gains mirror mental gains in ACL Recovery Journey', color='#585757', fontsize = 12, x = 0.28)\nplt.subplots_adjust(top = 0.905) # adjusting spacing between sub and main title\n\n\n# setting x-axis and y-axis labels:\nplt.xlabel('IKDC (Knee Function)', weight = 'bold', fontsize = 12)\nplt.ylabel('ACL_RSI (Mental Readiness)', weight = 'bold', fontsize = 12)\n\n# reducing clutter on the end of the x-axis:\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\nplt.locator_params(axis='x', nbins=8)  # reduces x-axis ticks\n\n# extra formatting (removing spines for cleaner look):\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\n# adding source as annotation:\nplt.figtext(0.1, -0.05, 'Source: UVA Department of Kinesiology and School of Data Science', ha='left', fontsize=10)\nplt.show()\n\n\n\n\n\n\n\n\nGraph 2:\nPlanning on creating a scatterplot showing how both physical and mental readiness affect each other and the individual’s overall confidence in returning to play.\n\n# setting font\ngeorgia_font = font_manager.FontProperties(family='Georgia')\nplt.rcParams['font.family'] = georgia_font.get_name()\n\ndf = df[['sex_dashboard', 'graft_dashboard2', 'reinjury', 'age', 'height_m', 'mass_kg', 'bmi', 'ikdc', 'acl_rsi']]\ndf = df[df['reinjury'].str.upper() != 'BLANK'] #get rid of all blank in reinjury\n\nprop_noreinjury = df['reinjury'].value_counts(normalize=True).get('No', 0) #get proportion of no reinjury\nprint(f\"Proportion of patients with no reinjury: {prop_noreinjury:.2%}\") #print proportion\n\ndf['reinjury_shifted'] = df['reinjury'].shift(-1) #align reinjury with other values\ndf_cleaned = df[df['graft_dashboard2'].notna()][['graft_dashboard2', 'reinjury_shifted']] #get rid of na\ndf_cleaned.columns = ['graft_dashboard2', 'reinjury'] #rename\n\ncounts = ( #get counts of graft and reinjury\n    df_cleaned.groupby(['graft_dashboard2', 'reinjury'])\n    .size()\n    .reset_index(name='count')\n)\n\ngraft_order = ['Allograft', 'QT autograft', 'HS autograft', 'BTB autograft', 'Other'] #order\ncounts['graft_dashboard2'] = pd.Categorical( #set order in counts\n    counts['graft_dashboard2'],\n    categories=graft_order,\n    ordered=True\n)\ntotal_per_graft = counts.groupby('graft_dashboard2')['count'].transform('sum') #get sums\ncounts['proportion'] = counts['count'] / total_per_graft #calculate proportions\n#show proportions\nprint(counts)\nprint('No reinjury proportions by Graft type:\\n' +\n'Allograft: 0.83\\n' +\n'BTB autograft: 0.89\\n' +\n'HS autograft: 0.92\\n' +\n'QT autograft: 0.87\\n' +   \n'Other: 0.84\\n')\n\ncounts_noreinjury = counts[counts['reinjury'] != 'No'] #get rid of no reinjury bar\nplt.figure(figsize=(10, 6))\nsns.barplot( #make grouped barplot\n    data=counts_noreinjury,\n    x='graft_dashboard2',\n    y='proportion',\n    hue='reinjury',\n    palette='mako'\n)\nplt.xlabel('Graft Type')\nplt.ylabel('Proportion of Reinjury Type')\nplt.title('Undergoing ACLR Surgery? Consider a Hamstring (HS) Tendon Autograft', fontsize=14, weight='bold', loc='left')  # Main title\nplt.text(0.01, 0.98, 'Comparing Proportions of Reinjury Types Across Different Graft Types', \n         ha='left', va='center', transform=plt.gca().transAxes, fontsize=10, color='gray')  # Subtitle\nplt.legend(title='Reinjury Type', loc='upper left', bbox_to_anchor=(0.775, 1.0))\nplt.text(-0.8, -0.02, 'Source: UVA Department of Kinesiology and School of Data Science', ha='left', fontsize=10)\n\nsns.despine(top=True, right=True, left=True) #get rid of axes\nplt.show()\n\nfindfont: Font family ['Georgia'] not found. Falling back to DejaVu Sans.\n/tmp/ipykernel_11929/934650589.py:27: FutureWarning:\n\nThe default of observed=False is deprecated and will be changed to True in a future version of pandas. Pass observed=False to retain current behavior or observed=True to adopt the future default and silence this warning.\n\n\n\nProportion of patients with no reinjury: 87.47%\n   graft_dashboard2       reinjury  count  proportion\n0         Allograft           Both      1    0.009174\n1         Allograft  Contralateral      3    0.027523\n2         Allograft    Ipsilateral     15    0.137615\n3         Allograft             No     90    0.825688\n4     BTB autograft  Contralateral     14    0.071066\n5     BTB autograft    Ipsilateral      7    0.035533\n6     BTB autograft             No    176    0.893401\n7      HS autograft  Contralateral     10    0.048544\n8      HS autograft    Ipsilateral      7    0.033981\n9      HS autograft             No    189    0.917476\n10            Other  Contralateral     12    0.100840\n11            Other    Ipsilateral      7    0.058824\n12            Other             No    100    0.840336\n13     QT autograft  Contralateral      8    0.067797\n14     QT autograft    Ipsilateral      7    0.059322\n15     QT autograft             No    103    0.872881\nNo reinjury proportions by Graft type:\nAllograft: 0.83\nBTB autograft: 0.89\nHS autograft: 0.92\nQT autograft: 0.87\nOther: 0.84\n\n\n\n\n\n\n\n\n\n\nGraph 3: Looking at the relationship between different reinjuries between the sexes.\n\n# small multiples bar chart\n\n# Set font family to Georgia\ngeorgia_font = font_manager.FontProperties(family='Georgia')\nplt.rcParams['font.family'] = georgia_font.get_name()\n\n# Records were mismatched so we shifted row values by 1 \n# (for every graft_type recorded, reinjury was blank so shifted by 1 to match)\nm_df['reinjury_shifted'] = m_df['reinjury'].shift(-1)\ndf2 = m_df[m_df['sex_dashboard'].notna()][['sex_dashboard', 'reinjury_shifted']]\ndf2.columns = ['sex_dashboard', 'reinjury']\n# print(df2.head()) # previewing cleaned dataset\n\ndf2 = df2[\n    (df2['reinjury'].str.upper() != 'BLANK') &\n    (df2['sex_dashboard'].str.upper() != 'BLANK')]\n\ndf2 = df2[df2['reinjury'].str.upper() != 'NO'] # dropping 'no' reinjury records\ndf2= df2[df2['reinjury'].str.upper() != 'BOTH'] # dropping 'both' reinjury records\n\n\ngrouped_counts2 = (\n    df2.groupby(['sex_dashboard', 'reinjury'])\n    .size()\n    .reset_index(name='count')\n)\n\n\n# Create sub-dataframes for Contralateral and Ipsilateral\ndf_contra = grouped_counts2[grouped_counts2['reinjury'] == 'Contralateral']\ndf_ipsi = grouped_counts2[grouped_counts2['reinjury'] == 'Ipsilateral']\n\n# Set up 1x2 subplot grid\nfig, axs = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\n\n# Title\nfig.suptitle('Males Reinjure Their ACLs More Than Females Overall', fontsize=14, weight='bold', x=0.1, ha='left', y=1.02)\n\n# Contralateral subplot\ncolors_contra = df_contra['sex_dashboard'].map({'Male': '#C8E7F5', 'Female': '#F6D2E0'})  # blue and pink\nbars_contra = axs[0].barh(df_contra['sex_dashboard'], df_contra['count'], color=colors_contra)\naxs[0].set_title('Contralateral', loc='left', weight='bold', color='black')\naxs[0].grid(axis='x', linestyle=':', color='gray')\naxs[0].spines['top'].set_visible(False)\naxs[0].spines['right'].set_visible(False)\naxs[0].spines['bottom'].set_visible(False)\naxs[0].tick_params(axis='x', length=0)\naxs[0].tick_params(axis='y', length=0)\n\nfor bar in bars_contra:\n    xval = bar.get_width()\n    axs[0].text(xval + 0.5, bar.get_y() + bar.get_height()/2,\n                round(xval), va='center', ha='left', fontsize=10)\n\n# Ipsilateral subplot\ncolors_ipsi = df_ipsi['sex_dashboard'].map({'Male': '#C8E7F5', 'Female': '#F6D2E0'})\nbars_ipsi = axs[1].barh(df_ipsi['sex_dashboard'], df_ipsi['count'], color=colors_ipsi)\naxs[1].set_title('Ipsilateral', loc='left', weight='bold', color='black')\naxs[1].grid(axis='x', linestyle=':', color='gray')\naxs[1].spines['top'].set_visible(False)\naxs[1].spines['right'].set_visible(False)\naxs[1].spines['bottom'].set_visible(False)\naxs[1].tick_params(axis='x', length=0)\naxs[1].tick_params(axis='y', length=0)\n\nfor bar in bars_ipsi:\n    xval = bar.get_width()\n    axs[1].text(xval + 0.5, bar.get_y() + bar.get_height()/2,\n                round(xval), va='center', ha='left', fontsize=10)\n\n# Final layout\nplt.text(-42, -0.8, 'Source: UVA Department of Kinesiology and School of Data Science', ha='left', fontsize=10)\n# plt.tight_layout()\nplt.show()",
>>>>>>> 0cdef91a41f44fb302137a81f8fe3c8d7ae31370
=======
    "text": "# Environment Setup:\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib \nimport seaborn as sns\nfrom matplotlib import font_manager\n\n\n# importing data as dataframe:\ndf = pd.read_csv('aclr data(in).csv')\n\n# filtering df to be consistent with relevant variables of interest:\ndf = df[['sex_dashboard', 'graft_dashboard2', 'reinjury', 'age', 'height_m', 'mass_kg', 'bmi', 'ikdc', 'acl_rsi', 'tegner_pre', 'tegner_now', 'lsi_ext_isok_60', 'lsi_flex_isok_60', 'tss_dashboard']]\n# previewing df with relevant columns:\n#df.head()\n# Filtering for numeric columns:\nnumeric_columns = df.select_dtypes(include=['int', 'float']).columns\n# imputing missing values with the mean for each respective column\nmean_values = df[numeric_columns].mean()\nm_df = df.fillna(mean_values)\n# previewing the imputed dataframe:\n#print(m_df.head(5))\ndf['sex_dashboard'] = df['sex_dashboard'].shift(-1)\n\n\n# == PLOT PREPARATION ==\n\n# data for graphing (getting rid of NaN values):\ndf_clean = df[['ikdc', 'acl_rsi', 'sex_dashboard', 'tss_dashboard']].dropna()\n\n\n# Filter by sex\ndf_male = df_clean[df_clean['sex_dashboard'] == 'Male']\ndf_female = df_clean[df_clean['sex_dashboard'] == 'Female']\n# setting plot size:\nplt.figure(figsize=(10, 6))\n# male graph:\nplt.scatter(df_male['ikdc'], df_male['acl_rsi'], \n            marker='x', label='Male', color='#0070BB', alpha=0.7, s=40)\n# Plot females with square markers\nplt.scatter(df_female['ikdc'], df_female['acl_rsi'], \n            marker='o', label='Female', color='#F653A6', alpha=0.5, s=40)\n\n# == SCAFFOLDING == \n\n# setting titles:\nplt.suptitle('Physical and Mental Recovery Go Hand in Hand', weight = 'bold', fontsize = 16, x = 0.39)\nplt.title('Physical gains mirror mental gains in ACL Recovery Journey', color='#585757', fontsize = 12, x = 0.28)\nplt.subplots_adjust(top = 0.905) # adjusting spacing between sub and main title\n\n\n# setting x-axis and y-axis labels:\nplt.xlabel('IKDC (Knee Function)', weight = 'bold', fontsize = 12)\nplt.ylabel('ACL_RSI (Mental Readiness)', weight = 'bold', fontsize = 12)\n\n# reducing clutter on the end of the x-axis:\nplt.xticks(fontsize=10)\nplt.yticks(fontsize=10)\nplt.locator_params(axis='x', nbins=8)  # reduces x-axis ticks\n\n# extra formatting (removing spines for cleaner look):\nplt.gca().spines['top'].set_visible(False)\nplt.gca().spines['right'].set_visible(False)\nplt.gca().spines['left'].set_visible(False)\n# adding source as annotation:\nplt.figtext(0.1, -0.05, 'Source: UVA Department of Kinesiology and School of Data Science', ha='left', fontsize=10)\nplt.show()\n\n\n\n\n\n\n\n\nGraph 2:\nPlanning on creating a scatterplot showing how both physical and mental readiness affect each other and the individual’s overall confidence in returning to play.\n\n# setting font\ngeorgia_font = font_manager.FontProperties(family='Georgia')\nplt.rcParams['font.family'] = georgia_font.get_name()\n\ndf = df[['sex_dashboard', 'graft_dashboard2', 'reinjury', 'age', 'height_m', 'mass_kg', 'bmi', 'ikdc', 'acl_rsi']]\ndf = df[df['reinjury'].str.upper() != 'BLANK'] #get rid of all blank in reinjury\n\nprop_noreinjury = df['reinjury'].value_counts(normalize=True).get('No', 0) #get proportion of no reinjury\nprint(f\"Proportion of patients with no reinjury: {prop_noreinjury:.2%}\") #print proportion\n\ndf['reinjury_shifted'] = df['reinjury'].shift(-1) #align reinjury with other values\ndf_cleaned = df[df['graft_dashboard2'].notna()][['graft_dashboard2', 'reinjury_shifted']] #get rid of na\ndf_cleaned.columns = ['graft_dashboard2', 'reinjury'] #rename\n\ncounts = ( #get counts of graft and reinjury\n    df_cleaned.groupby(['graft_dashboard2', 'reinjury'])\n    .size()\n    .reset_index(name='count')\n)\n\ngraft_order = ['Allograft', 'QT autograft', 'HS autograft', 'BTB autograft', 'Other'] #order\ncounts['graft_dashboard2'] = pd.Categorical( #set order in counts\n    counts['graft_dashboard2'],\n    categories=graft_order,\n    ordered=True\n)\ntotal_per_graft = counts.groupby('graft_dashboard2')['count'].transform('sum') #get sums\ncounts['proportion'] = counts['count'] / total_per_graft #calculate proportions\n#show proportions\nprint(counts)\nprint('No reinjury proportions by Graft type:\\n' +\n'Allograft: 0.83\\n' +\n'BTB autograft: 0.89\\n' +\n'HS autograft: 0.92\\n' +\n'QT autograft: 0.87\\n' +   \n'Other: 0.84\\n')\n\ncounts_noreinjury = counts[counts['reinjury'] != 'No'] #get rid of no reinjury bar\nplt.figure(figsize=(10, 6))\nsns.barplot( #make grouped barplot\n    data=counts_noreinjury,\n    x='graft_dashboard2',\n    y='proportion',\n    hue='reinjury',\n    palette='mako'\n)\nplt.xlabel('Graft Type')\nplt.ylabel('Proportion of Reinjury Type')\nplt.title('Undergoing ACLR Surgery? Consider a Hamstring (HS) Tendon Autograft', fontsize=14, weight='bold', loc='left')  # Main title\nplt.text(0.01, 0.98, 'Comparing Proportions of Reinjury Types Across Different Graft Types', \n         ha='left', va='center', transform=plt.gca().transAxes, fontsize=10, color='gray')  # Subtitle\nplt.legend(title='Reinjury Type', loc='upper left', bbox_to_anchor=(0.775, 1.0))\nplt.text(-0.8, -0.02, 'Source: UVA Department of Kinesiology and School of Data Science', ha='left', fontsize=10)\n\nsns.despine(top=True, right=True, left=True) #get rid of axes\nplt.show()\n\nProportion of patients with no reinjury: 87.47%\n   graft_dashboard2       reinjury  count  proportion\n0         Allograft           Both      1    0.009174\n1         Allograft  Contralateral      3    0.027523\n2         Allograft    Ipsilateral     15    0.137615\n3         Allograft             No     90    0.825688\n4     BTB autograft  Contralateral     14    0.071066\n5     BTB autograft    Ipsilateral      7    0.035533\n6     BTB autograft             No    176    0.893401\n7      HS autograft  Contralateral     10    0.048544\n8      HS autograft    Ipsilateral      7    0.033981\n9      HS autograft             No    189    0.917476\n10            Other  Contralateral     12    0.100840\n11            Other    Ipsilateral      7    0.058824\n12            Other             No    100    0.840336\n13     QT autograft  Contralateral      8    0.067797\n14     QT autograft    Ipsilateral      7    0.059322\n15     QT autograft             No    103    0.872881\nNo reinjury proportions by Graft type:\nAllograft: 0.83\nBTB autograft: 0.89\nHS autograft: 0.92\nQT autograft: 0.87\nOther: 0.84\n\n\n\n\n\n\n\n\n\n\nGraph 3: Looking at the relationship between different reinjuries between the sexes.\n\n# small multiples bar chart\n\n# Set font family to Georgia\ngeorgia_font = font_manager.FontProperties(family='Georgia')\nplt.rcParams['font.family'] = georgia_font.get_name()\n\n# Records were mismatched so we shifted row values by 1 \n# (for every graft_type recorded, reinjury was blank so shifted by 1 to match)\nm_df['reinjury_shifted'] = m_df['reinjury'].shift(-1)\ndf2 = m_df[m_df['sex_dashboard'].notna()][['sex_dashboard', 'reinjury_shifted']]\ndf2.columns = ['sex_dashboard', 'reinjury']\n# print(df2.head()) # previewing cleaned dataset\n\ndf2 = df2[\n    (df2['reinjury'].str.upper() != 'BLANK') &\n    (df2['sex_dashboard'].str.upper() != 'BLANK')]\n\ndf2 = df2[df2['reinjury'].str.upper() != 'NO'] # dropping 'no' reinjury records\ndf2= df2[df2['reinjury'].str.upper() != 'BOTH'] # dropping 'both' reinjury records\n\n\ngrouped_counts2 = (\n    df2.groupby(['sex_dashboard', 'reinjury'])\n    .size()\n    .reset_index(name='count')\n)\n\n\n# Create sub-dataframes for Contralateral and Ipsilateral\ndf_contra = grouped_counts2[grouped_counts2['reinjury'] == 'Contralateral']\ndf_ipsi = grouped_counts2[grouped_counts2['reinjury'] == 'Ipsilateral']\n\n# Set up 1x2 subplot grid\nfig, axs = plt.subplots(1, 2, figsize=(12, 5), sharey=True)\n\n# Title\nfig.suptitle('Males Reinjure Their ACLs More Than Females Overall', fontsize=14, weight='bold', x=0.1, ha='left', y=1.02)\n\n# Contralateral subplot\ncolors_contra = df_contra['sex_dashboard'].map({'Male': '#C8E7F5', 'Female': '#F6D2E0'})  # blue and pink\nbars_contra = axs[0].barh(df_contra['sex_dashboard'], df_contra['count'], color=colors_contra)\naxs[0].set_title('Contralateral', loc='left', weight='bold', color='black')\naxs[0].grid(axis='x', linestyle=':', color='gray')\naxs[0].spines['top'].set_visible(False)\naxs[0].spines['right'].set_visible(False)\naxs[0].spines['bottom'].set_visible(False)\naxs[0].tick_params(axis='x', length=0)\naxs[0].tick_params(axis='y', length=0)\n\nfor bar in bars_contra:\n    xval = bar.get_width()\n    axs[0].text(xval + 0.5, bar.get_y() + bar.get_height()/2,\n                round(xval), va='center', ha='left', fontsize=10)\n\n# Ipsilateral subplot\ncolors_ipsi = df_ipsi['sex_dashboard'].map({'Male': '#C8E7F5', 'Female': '#F6D2E0'})\nbars_ipsi = axs[1].barh(df_ipsi['sex_dashboard'], df_ipsi['count'], color=colors_ipsi)\naxs[1].set_title('Ipsilateral', loc='left', weight='bold', color='black')\naxs[1].grid(axis='x', linestyle=':', color='gray')\naxs[1].spines['top'].set_visible(False)\naxs[1].spines['right'].set_visible(False)\naxs[1].spines['bottom'].set_visible(False)\naxs[1].tick_params(axis='x', length=0)\naxs[1].tick_params(axis='y', length=0)\n\nfor bar in bars_ipsi:\n    xval = bar.get_width()\n    axs[1].text(xval + 0.5, bar.get_y() + bar.get_height()/2,\n                round(xval), va='center', ha='left', fontsize=10)\n\n# Final layout\nplt.text(-42, -0.8, 'Source: UVA Department of Kinesiology and School of Data Science', ha='left', fontsize=10)\n# plt.tight_layout()\nplt.show()",
>>>>>>> 4f66144f6d344353bbf188acbb4f487803d24698
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Data Visualization</span>"
    ]
  },
  {
    "objectID": "dict.html",
    "href": "dict.html",
    "title": "4  Data Dictionary",
    "section": "",
    "text": "Here are the relevant variables we used to complete our analysis with their meanings.\n\n\n\n\n\n\n\nVariable\nDescription\n\n\n\n\nacl_rsi\nThe return-to-sport-after-injury score is self-reported by the patient.\n\n\nage\nThe age at which the patient received surgery.\n\n\nbmi\nBody mass index of the patient.\n\n\ngraft_dashboard2\nThe types of grafts used in surgery are allograft, QT autograft,\n\n\n\nHS autograft, BTB autograft, and others.\n\n\nheight_m\nThe height of the patient in meters.\n\n\nikdc\nA patient-reported outcome measure used to assess knee function and\n\n\n\nsymptoms.\n\n\nmass_kg\nThe weight of the patient in kilograms.\n\n\nreinjury\nThe different types of reinjuries: contralateral, ipsilateral, and both.\n\n\nsex_dashboard\nThe gender of the patient: male or female.\n\n\ntss_dashboard\nCategorizes the months post-surgery into subsets.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Data Dictionary</span>"
    ]
  }
]